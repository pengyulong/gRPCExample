// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: textfeature.proto

#include "textfeature.pb.h"
#include "textfeature.grpc.pb.h"

#include <functional>
#include <grpcpp/impl/codegen/async_stream.h>
#include <grpcpp/impl/codegen/async_unary_call.h>
#include <grpcpp/impl/codegen/channel_interface.h>
#include <grpcpp/impl/codegen/client_unary_call.h>
#include <grpcpp/impl/codegen/client_callback.h>
#include <grpcpp/impl/codegen/method_handler_impl.h>
#include <grpcpp/impl/codegen/rpc_service_method.h>
#include <grpcpp/impl/codegen/server_callback.h>
#include <grpcpp/impl/codegen/service_type.h>
#include <grpcpp/impl/codegen/sync_stream.h>
namespace textfeature {

static const char* TextFeature_method_names[] = {
  "/textfeature.TextFeature/SimpleRPC",
  "/textfeature.TextFeature/ServerStreamRPC",
  "/textfeature.TextFeature/ClientStreamRPC",
  "/textfeature.TextFeature/BidirectionalStreamRPC",
};

std::unique_ptr< TextFeature::Stub> TextFeature::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< TextFeature::Stub> stub(new TextFeature::Stub(channel));
  return stub;
}

TextFeature::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel)
  : channel_(channel), rpcmethod_SimpleRPC_(TextFeature_method_names[0], ::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_ServerStreamRPC_(TextFeature_method_names[1], ::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  , rpcmethod_ClientStreamRPC_(TextFeature_method_names[2], ::grpc::internal::RpcMethod::CLIENT_STREAMING, channel)
  , rpcmethod_BidirectionalStreamRPC_(TextFeature_method_names[3], ::grpc::internal::RpcMethod::BIDI_STREAMING, channel)
  {}

::grpc::Status TextFeature::Stub::SimpleRPC(::grpc::ClientContext* context, const ::textfeature::textRequest& request, ::textfeature::keyResponse* response) {
  return ::grpc::internal::BlockingUnaryCall(channel_.get(), rpcmethod_SimpleRPC_, context, request, response);
}

void TextFeature::Stub::experimental_async::SimpleRPC(::grpc::ClientContext* context, const ::textfeature::textRequest* request, ::textfeature::keyResponse* response, std::function<void(::grpc::Status)> f) {
  return ::grpc::internal::CallbackUnaryCall(stub_->channel_.get(), stub_->rpcmethod_SimpleRPC_, context, request, response, std::move(f));
}

::grpc::ClientAsyncResponseReader< ::textfeature::keyResponse>* TextFeature::Stub::AsyncSimpleRPCRaw(::grpc::ClientContext* context, const ::textfeature::textRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::textfeature::keyResponse>::Create(channel_.get(), cq, rpcmethod_SimpleRPC_, context, request, true);
}

::grpc::ClientAsyncResponseReader< ::textfeature::keyResponse>* TextFeature::Stub::PrepareAsyncSimpleRPCRaw(::grpc::ClientContext* context, const ::textfeature::textRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderFactory< ::textfeature::keyResponse>::Create(channel_.get(), cq, rpcmethod_SimpleRPC_, context, request, false);
}

::grpc::ClientReader< ::textfeature::orderkeyResponse>* TextFeature::Stub::ServerStreamRPCRaw(::grpc::ClientContext* context, const ::textfeature::sentenceRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::textfeature::orderkeyResponse>::Create(channel_.get(), rpcmethod_ServerStreamRPC_, context, request);
}

::grpc::ClientAsyncReader< ::textfeature::orderkeyResponse>* TextFeature::Stub::AsyncServerStreamRPCRaw(::grpc::ClientContext* context, const ::textfeature::sentenceRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::textfeature::orderkeyResponse>::Create(channel_.get(), cq, rpcmethod_ServerStreamRPC_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::textfeature::orderkeyResponse>* TextFeature::Stub::PrepareAsyncServerStreamRPCRaw(::grpc::ClientContext* context, const ::textfeature::sentenceRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::textfeature::orderkeyResponse>::Create(channel_.get(), cq, rpcmethod_ServerStreamRPC_, context, request, false, nullptr);
}

::grpc::ClientWriter< ::textfeature::docsRequest>* TextFeature::Stub::ClientStreamRPCRaw(::grpc::ClientContext* context, ::textfeature::SummaryKeyWords* response) {
  return ::grpc::internal::ClientWriterFactory< ::textfeature::docsRequest>::Create(channel_.get(), rpcmethod_ClientStreamRPC_, context, response);
}

::grpc::ClientAsyncWriter< ::textfeature::docsRequest>* TextFeature::Stub::AsyncClientStreamRPCRaw(::grpc::ClientContext* context, ::textfeature::SummaryKeyWords* response, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::textfeature::docsRequest>::Create(channel_.get(), cq, rpcmethod_ClientStreamRPC_, context, response, true, tag);
}

::grpc::ClientAsyncWriter< ::textfeature::docsRequest>* TextFeature::Stub::PrepareAsyncClientStreamRPCRaw(::grpc::ClientContext* context, ::textfeature::SummaryKeyWords* response, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncWriterFactory< ::textfeature::docsRequest>::Create(channel_.get(), cq, rpcmethod_ClientStreamRPC_, context, response, false, nullptr);
}

::grpc::ClientReaderWriter< ::textfeature::docsRequest, ::textfeature::orderkeyResponse>* TextFeature::Stub::BidirectionalStreamRPCRaw(::grpc::ClientContext* context) {
  return ::grpc::internal::ClientReaderWriterFactory< ::textfeature::docsRequest, ::textfeature::orderkeyResponse>::Create(channel_.get(), rpcmethod_BidirectionalStreamRPC_, context);
}

::grpc::ClientAsyncReaderWriter< ::textfeature::docsRequest, ::textfeature::orderkeyResponse>* TextFeature::Stub::AsyncBidirectionalStreamRPCRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::textfeature::docsRequest, ::textfeature::orderkeyResponse>::Create(channel_.get(), cq, rpcmethod_BidirectionalStreamRPC_, context, true, tag);
}

::grpc::ClientAsyncReaderWriter< ::textfeature::docsRequest, ::textfeature::orderkeyResponse>* TextFeature::Stub::PrepareAsyncBidirectionalStreamRPCRaw(::grpc::ClientContext* context, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderWriterFactory< ::textfeature::docsRequest, ::textfeature::orderkeyResponse>::Create(channel_.get(), cq, rpcmethod_BidirectionalStreamRPC_, context, false, nullptr);
}

TextFeature::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextFeature_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< TextFeature::Service, ::textfeature::textRequest, ::textfeature::keyResponse>(
          std::mem_fn(&TextFeature::Service::SimpleRPC), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextFeature_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< TextFeature::Service, ::textfeature::sentenceRequest, ::textfeature::orderkeyResponse>(
          std::mem_fn(&TextFeature::Service::ServerStreamRPC), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextFeature_method_names[2],
      ::grpc::internal::RpcMethod::CLIENT_STREAMING,
      new ::grpc::internal::ClientStreamingHandler< TextFeature::Service, ::textfeature::docsRequest, ::textfeature::SummaryKeyWords>(
          std::mem_fn(&TextFeature::Service::ClientStreamRPC), this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      TextFeature_method_names[3],
      ::grpc::internal::RpcMethod::BIDI_STREAMING,
      new ::grpc::internal::BidiStreamingHandler< TextFeature::Service, ::textfeature::docsRequest, ::textfeature::orderkeyResponse>(
          std::mem_fn(&TextFeature::Service::BidirectionalStreamRPC), this)));
}

TextFeature::Service::~Service() {
}

::grpc::Status TextFeature::Service::SimpleRPC(::grpc::ServerContext* context, const ::textfeature::textRequest* request, ::textfeature::keyResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextFeature::Service::ServerStreamRPC(::grpc::ServerContext* context, const ::textfeature::sentenceRequest* request, ::grpc::ServerWriter< ::textfeature::orderkeyResponse>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextFeature::Service::ClientStreamRPC(::grpc::ServerContext* context, ::grpc::ServerReader< ::textfeature::docsRequest>* reader, ::textfeature::SummaryKeyWords* response) {
  (void) context;
  (void) reader;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status TextFeature::Service::BidirectionalStreamRPC(::grpc::ServerContext* context, ::grpc::ServerReaderWriter< ::textfeature::orderkeyResponse, ::textfeature::docsRequest>* stream) {
  (void) context;
  (void) stream;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace textfeature

